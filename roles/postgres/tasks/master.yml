---
- name: Ensure replication user exists
  become_user: postgres
  shell: >
    psql -tAc "SELECT 1 FROM pg_roles WHERE rolname = '{{ pg_replica_user }}';"
  register: replication_user_check
  changed_when: false

- name: Update or create replication user
  become_user: postgres
  shell: >
    psql -c "CREATE ROLE {{ pg_replica_user }} WITH LOGIN REPLICATION ENCRYPTED PASSWORD '{{ pg_replica_password }}';"
  when: replication_user_check.stdout != '1'

- name: Configure master server
  become: true
  become_user: postgres
  blockinfile:
    path: "{{ pg_conf_dir }}/postgresql.conf"
    create: yes
    block: |
      archive_mode = on
      archive_command = 'test ! -f /home/postgres/archivedir/%f && cp %p /home/postgres/archivedir/%f'
      wal_level = replica
      max_wal_senders = 3
      listen_addresses = '*'
      wal_keep_size = 1GB
  notify: Restart PostgreSQL

- name: Add trust in pg_hba.conf
  become: true
  become_user: postgres
  lineinfile:
    state: present
    dest: "{{ pg_conf_dir }}/pg_hba.conf"
    regexp: "host.*replication.*{{ item }}/32.*trust"
    line: "host    replication    {{ pg_replica_user }}  {{ item }}/32 trust"
  loop: "{{ pg_replica_address }}"
  when: pg_replica_address is defined
  notify: Restart PostgreSQL

- name: Create postgresql databases
  community.postgresql.postgresql_db:
    state: present
    name: "{{ item }}"
  become: true
  become_user: postgres
  with_items:
    - "{{ pg_database_list }}"
  when: pg_database_list is defined
  notify: Restart PostgreSQL

- name: Create database users
  community.postgresql.postgresql_user:
    state: present
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  become: true
  become_user: postgres
  with_items:
    - "{{ pg_user_list }}"
  when: pg_user_list is defined
  notify: Restart PostgreSQL

- name: Grant db users access to app db
  community.postgresql.postgresql_privs:
    type: database
    database: "{{ item.db }}"
    roles: "{{ item.user }}"
    grant_option: no
    privs: all
  become: true
  become_user: postgres
  with_items:
    - "{{ pg_user_database_list }}"
  when: pg_user_database_list is defined
  notify: Restart PostgreSQL

- name: Allow md5 connection for the db user
  postgresql_pg_hba:
    dest: "{{ pg_conf_dir }}/pg_hba.conf"
    contype: host
    databases: all
    method: md5
    users: "{{ item.name }}"
    create: true
  become: true
  become_user: postgres
  with_items:
    - "{{ pg_user_list }}"
  notify: Restart PostgreSQL

- name: Restart PostgreSQL
  become: true
  ansible.builtin.service:
    name: postgresql
    state: restarted
